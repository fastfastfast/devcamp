[{"C:\\Users\\sangh\\Documents\\devcamp\\src\\page\\Play.js":"1","C:\\Users\\sangh\\Documents\\devcamp\\src\\page\\Community.js":"2"},{"size":9987,"mtime":1606905224887,"results":"3","hashOfConfig":"4"},{"size":8255,"mtime":1606899104549,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"1q3ay53",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\sangh\\Documents\\devcamp\\src\\page\\Play.js",["11","12","13","14","15","16","17","18","19"],"import { Card, ListGroup, Tab, Row, Col, Image, Button, CardDeck,Modal,Form } from 'react-bootstrap';\r\nimport '../Styles/Play.css';\r\nimport NavBar from '../components/NavBar';\r\nimport Figure from 'react-bootstrap/Figure'\r\nimport { firebase } from '../services/firebase'\r\nimport { useEffect, useState } from 'react'\r\nimport DatePicker from 'react-date-picker';\r\nimport TimePicker from 'react-time-picker';\r\n\r\nfunction Play() {\r\n    const [cardInfo, setCardInfo] = useState()\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const [date, onChange] = useState(new Date());\r\n    const [time, onChange1] = useState();\r\n    const [cardName, setCardName] = useState();\r\n\r\n    const [bookingGameName, setbookingGameName] = useState(\"dota2\");\r\n\r\n    const onSubmitDate = e => {\r\n        e.preventDefault()\r\n        firebase.database().ref(`/booking/${cardName}`).push({date : date.toString().substring(0, 15), game : bookingGameName, name: \"two\", time: time})\r\n        console.log(date);\r\n        console.log(time);\r\n    }\r\n\r\n    const renderCard = (card, index) => {\r\n        {/*loop display card namd and description*/ }\r\n        return (\r\n            <Card style={{ width: '18rem' }} key={index} className=\"box\">\r\n                {/* <Card.Img variant=\"top\" src=\"holder.js/100px180\" /> */}\r\n                <Card.Body>\r\n                    <Card.Title>{card.name}</Card.Title>\r\n                    <Card.Text>{card.description}</Card.Text>\r\n                    <Button variant=\"primary\" onClick={handleShow}>\r\n                        Booking\r\n                    </Button>\r\n                    <Modal show={show} onHide={handleClose} animation={false}>\r\n                        <Modal.Header closeButton>\r\n                        <Modal.Title>Selected Time</Modal.Title>\r\n                        </Modal.Header>\r\n                        <h4>\r\n                            choose day\r\n                        </h4>\r\n                        <Form onSubmit={onSubmitDate}>\r\n                        <div>\r\n                        <DatePicker\r\n                            onChange={onChange}\r\n                            date={date}\r\n                        />\r\n                        </div>\r\n                        <h4>\r\n                            choose time\r\n                        </h4>\r\n                        <div>\r\n                        <TimePicker\r\n                            onChange={onChange1}\r\n                            time={time}\r\n                        />\r\n                        </div>\r\n                        <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\"  type=\"submit\"  >\r\n                            Submit\r\n                        </Button>\r\n                        </Modal.Footer>\r\n                        </Form>\r\n                    </Modal>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        {/* hook database from firebase */ }\r\n        const fetchData = async () => {\r\n            const snaphot = await firebase.database().ref('/user').once('value')\r\n            const data = snaphot.val()\r\n            // console.log(data)\r\n            setCardInfo(data)\r\n        }\r\n        fetchData()\r\n    }, [])\r\n    // const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            <NavBar />\r\n            <div className=\"Play\">\r\n                <Tab.Container id=\"list-group-tabs-example\" defaultActiveKey=\"#dota2\">\r\n                    <Row>\r\n                        <Col sm={2}>\r\n                            <ListGroup>\r\n                                <ListGroup.Item action href=\"#dota2\" onClick={() => setbookingGameName(\"dota2\")}>\r\n                                    <Figure.Image\r\n                                        src=\"https://steamcdn-a.akamaihd.net/steam/apps/570/header.jpg?t=1605831017\"\r\n                                    />\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item action href=\"#csgo\" onClick={() => setbookingGameName(\"csgo\")}>\r\n                                    <Figure.Image\r\n                                        src=\"https://steamcdn-a.akamaihd.net/steam/apps/730/header.jpg?t=1605757059\"\r\n                                    />\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item action href=\"#amongus\" onClick={() => setbookingGameName(\"amongus\")}>\r\n                                    <Figure.Image\r\n                                        src=\"https://steamcdn-a.akamaihd.net/steam/apps/945360/header.jpg?t=1606422465\"\r\n                                    />\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item action href=\"#genshin\" onClick={() => setbookingGameName(\"genshin\")}>\r\n                                    <Figure.Image\r\n                                        src=\"https://www.appdisqus.com/wp-content/uploads/2020/09/00-5-1.jpg\"\r\n                                    />\r\n                                </ListGroup.Item>\r\n                            </ListGroup>\r\n                        </Col>\r\n                        <Col sm={9}>\r\n                            <Tab.Content >\r\n                                <Tab.Pane eventKey=\"#dota2\">\r\n                                    <div class=\"container\">\r\n                                        <img src={`${process.env.PUBLIC_URL}/dota2.png`} className=\"img-size\" />\r\n                                        <h1 style={{ fontSize: \"100px\", fontFamily: \"Sofia\" }} class=\"top-left\">DOTA2</h1>\r\n                                        {cardInfo && \r\n                                            <div className=\"grid\"> {/* if cardInfo have item  */}\r\n                                                {\r\n                                                    cardInfo.filter( user => (user.game).includes(\"dota2\") ).map(renderCard) \r\n                                                        /* loop if user.game have dota2 include in cardInfo call renderCard -> cardInfo  */\r\n                                                }\r\n                                            </div>\r\n                                        }\r\n                                    </div>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"#csgo\"  >\r\n                                    <div class=\"container\">\r\n                                        <img src={`${process.env.PUBLIC_URL}/csgo.jpg`} className=\"img-size\" />\r\n                                        <h1 style={{ fontSize: \"100px\", fontFamily: \"Sofia\" }} class=\"top-left\">CS:GO</h1>\r\n                                        {cardInfo && \r\n                                            <div className=\"grid\" > {/* if cardInfo have item  */}\r\n                                            \r\n                                                {\r\n                                                    \r\n                                                    cardInfo.filter( user => (user.game).includes(\"csgo\") ).map(renderCard) \r\n                                                        /* loop if user.game have csgo include in cardInfo call renderCard -> cardInfo  */\r\n                                                }\r\n                                            </div>\r\n                                        }\r\n                                    </div>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"#amongus\">\r\n                                    <div class=\"container\">\r\n                                        <img src={`${process.env.PUBLIC_URL}/amongUs.jpg`} className=\"img-size\" />\r\n                                        <h1 style={{ fontSize: \"100px\", fontFamily: \"Sofia\" }} class=\"top-left\">Among Us</h1>\r\n                                        {cardInfo && \r\n                                            <div className=\"grid\"> {/* if cardInfo have item  */}\r\n                                                {\r\n                                                    cardInfo.filter( user => (user.game).includes(\"amongus\") ).map(renderCard) \r\n                                                        /* loop if user.game have amongUs include in cardInfo call renderCard -> cardInfo  */\r\n                                                }\r\n                                            </div>\r\n                                        }\r\n                                    </div>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"#genshin\">\r\n                                    <div class=\"container\">\r\n                                        <img src={`${process.env.PUBLIC_URL}/genshin.jpg`} className=\"img-size\" />\r\n                                        <h1 style={{ fontSize: \"100px\", fontFamily: \"Sofia\" }} class=\"top-left\">Genshin</h1>\r\n                                        {cardInfo && \r\n                                            <div className=\"grid\">\r\n                                                {\r\n                                                    cardInfo.filter( user => (user.game).includes(\"genshin\") ).map(renderCard) \r\n                                                        /* loop if user.game have genshin include in cardInfo call renderCard -> cardInfo  */\r\n                                                }\r\n                                            </div>\r\n                                        }\r\n                                    </div>\r\n                                </Tab.Pane>\r\n                            </Tab.Content>\r\n                        </Col>\r\n                    </Row>\r\n                </Tab.Container>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Play;","C:\\Users\\sangh\\Documents\\devcamp\\src\\page\\Community.js",["20"],{"ruleId":"21","severity":1,"message":"22","line":1,"column":42,"nodeType":"23","messageId":"24","endLine":1,"endColumn":47},{"ruleId":"21","severity":1,"message":"25","line":1,"column":57,"nodeType":"23","messageId":"24","endLine":1,"endColumn":65},{"ruleId":"21","severity":1,"message":"26","line":17,"column":22,"nodeType":"23","messageId":"24","endLine":17,"endColumn":33},{"ruleId":"27","severity":1,"message":"28","line":29,"column":9,"nodeType":"29","messageId":"30","endLine":29,"endColumn":54},{"ruleId":"27","severity":1,"message":"28","line":78,"column":9,"nodeType":"29","messageId":"30","endLine":78,"endColumn":45},{"ruleId":"31","severity":1,"message":"32","line":123,"column":41,"nodeType":"33","endLine":123,"endColumn":113},{"ruleId":"31","severity":1,"message":"32","line":137,"column":41,"nodeType":"33","endLine":137,"endColumn":112},{"ruleId":"31","severity":1,"message":"32","line":153,"column":41,"nodeType":"33","endLine":153,"endColumn":115},{"ruleId":"31","severity":1,"message":"32","line":167,"column":41,"nodeType":"33","endLine":167,"endColumn":115},{"ruleId":"27","severity":1,"message":"28","line":29,"column":9,"nodeType":"29","messageId":"30","endLine":29,"endColumn":45},"no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'CardDeck' is defined but never used.","'setCardName' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]